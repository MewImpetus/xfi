;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

_ $StateInit$_get_code((cell, cell) v) inline {
    var (v'code, v'data) = v;
    return v'code;
}

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode(slice to, int value, int bounce, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: JettonData
;; TLB: _ total_supply:coins mintable:bool admin_address:address jetton_content:^cell jetton_wallet_code:^cell = JettonData
;;

(int, int, slice, cell, cell) $JettonData$_to_external(((int, int, slice, cell, cell)) v) inline {
    var (v'total_supply, v'mintable, v'admin_address, v'jetton_content, v'jetton_wallet_code) = v; 
    return (v'total_supply, v'mintable, v'admin_address, v'jetton_content, v'jetton_wallet_code);
}

((int, int, slice, cell, cell)) $JettonData$_constructor_total_supply_mintable_admin_address_jetton_content_jetton_wallet_code(int total_supply, int mintable, slice admin_address, cell jetton_content, cell jetton_wallet_code) inline {
    return (total_supply, mintable, admin_address, jetton_content, jetton_wallet_code);
}

;;
;; Type: JettonMint
;; Header: 0x4401b784
;; TLB: jetton_mint#4401b784 origin:address receiver:address amount:int257 custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> txid:Maybe ^string = JettonMint
;;

((slice, slice, int, cell, int, slice, slice)) $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload_txid(slice origin, slice receiver, int amount, cell custom_payload, int forward_ton_amount, slice forward_payload, slice txid) inline {
    return (origin, receiver, amount, custom_payload, forward_ton_amount, forward_payload, txid);
}

;;
;; Type: JettonInternalTransfer
;; Header: 0x178d4519
;; TLB: jetton_internal_transfer#178d4519 query_id:uint64 amount:coins from:address response_address:address forward_ton_amount:coins forward_payload:remainder<slice> = JettonInternalTransfer
;;

builder $JettonInternalTransfer$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'from, v'response_address, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 395134233, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    build_0 = __tact_store_address(build_0, v'response_address);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $JettonInternalTransfer$_store_cell((int, int, slice, slice, int, slice) v) inline {
    return $JettonInternalTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, int, slice)) $JettonInternalTransfer$_constructor_query_id_amount_response_address_from_forward_ton_amount_forward_payload(int query_id, int amount, slice response_address, slice from, int forward_ton_amount, slice forward_payload) inline {
    return (query_id, amount, from, response_address, forward_ton_amount, forward_payload);
}

;;
;; Type: JettonBurnNotification
;; Header: 0x7bdd97de
;; TLB: jetton_burn_notification#7bdd97de query_id:uint64 amount:coins sender:address response_destination:address = JettonBurnNotification
;;

(slice, ((int, int, slice, slice))) $JettonBurnNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2078119902);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'sender = sc_0~__tact_load_address();
    var v'response_destination = sc_0~__tact_load_address();
    return (sc_0, (v'query_id, v'amount, v'sender, v'response_destination));
}

;;
;; Type: Mint
;; Header: 0xedebb4d2
;; TLB: mint#edebb4d2 receiver:address amount:int257 receiver_str:^string txid:^string proof_length:uint8 proof:^cell = Mint
;;

(slice, ((slice, int, slice, slice, int, cell))) $Mint$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 3991647442);
    var v'receiver = sc_0~__tact_load_address();
    var v'amount = sc_0~load_int(257);
    var v'receiver_str = sc_0~load_ref().begin_parse();
    var v'txid = sc_0~load_ref().begin_parse();
    var v'proof_length = sc_0~load_uint(8);
    var v'proof = sc_0~load_ref();
    return (sc_0, (v'receiver, v'amount, v'receiver_str, v'txid, v'proof_length, v'proof));
}

((slice, int, slice, slice, int, cell)) $Mint$_tensor_cast((slice, int, slice, slice, int, cell) v) asm "NOP";

(slice, int, slice, slice, int, cell) $Mint$_from_tuple(tuple v) inline {
    var (slice v'receiver, int v'amount, slice v'receiver_str, slice v'txid, int v'proof_length, cell v'proof) = __tact_tuple_destroy_6(v);
    return (__tact_verify_address(v'receiver), v'amount, v'receiver_str, v'txid, v'proof_length, v'proof);
}

;;
;; Type: MintConfig
;; TLB: _ merkle_root:^string set_at:uint32 set_interval:uint32 admin:address max_mint_today:uint64 minted_today:uint64 = MintConfig
;;

builder $MintConfig$_store(builder build_0, (slice, int, int, slice, int, int) v) inline_ref {
    var (v'merkle_root, v'set_at, v'set_interval, v'admin, v'max_mint_today, v'minted_today) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'merkle_root).end_cell());
    build_0 = build_0.store_uint(v'set_at, 32);
    build_0 = build_0.store_uint(v'set_interval, 32);
    build_0 = __tact_store_address(build_0, v'admin);
    build_0 = build_0.store_uint(v'max_mint_today, 64);
    build_0 = build_0.store_uint(v'minted_today, 64);
    return build_0;
}

(slice, ((slice, int, int, slice, int, int))) $MintConfig$_load(slice sc_0) inline_ref {
    var v'merkle_root = sc_0~load_ref().begin_parse();
    var v'set_at = sc_0~load_uint(32);
    var v'set_interval = sc_0~load_uint(32);
    var v'admin = sc_0~__tact_load_address();
    var v'max_mint_today = sc_0~load_uint(64);
    var v'minted_today = sc_0~load_uint(64);
    return (sc_0, (v'merkle_root, v'set_at, v'set_interval, v'admin, v'max_mint_today, v'minted_today));
}

;;
;; Type: MerkleRoot
;; Header: 0x9ae87bbb
;; TLB: merkle_root#9ae87bbb value:^string = MerkleRoot
;;

(slice, ((slice))) $MerkleRoot$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2598927291);
    var v'value = sc_0~load_ref().begin_parse();
    return (sc_0, (v'value));
}

;;
;; Type: MerkleAdmin
;; Header: 0x616d8aeb
;; TLB: merkle_admin#616d8aeb admin:address = MerkleAdmin
;;

(slice, ((slice))) $MerkleAdmin$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1634568939);
    var v'admin = sc_0~__tact_load_address();
    return (sc_0, (v'admin));
}

;;
;; Type: ClaimTransfer
;; Header: 0x8be50851
;; TLB: claim_transfer#8be50851 query_id:uint64 amount:coins from:address response_address:address forward_ton_amount:coins forward_payload:remainder<slice> txid:^string = ClaimTransfer
;;

builder $ClaimTransfer$_store(builder build_0, (int, int, slice, slice, int, slice, slice) v) inline_ref {
    var (v'query_id, v'amount, v'from, v'response_address, v'forward_ton_amount, v'forward_payload, v'txid) = v;
    build_0 = store_uint(build_0, 2347042897, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    build_0 = __tact_store_address(build_0, v'response_address);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'txid).end_cell());
    return build_0;
}

cell $ClaimTransfer$_store_cell((int, int, slice, slice, int, slice, slice) v) inline {
    return $ClaimTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, int, slice, slice)) $ClaimTransfer$_constructor_query_id_amount_response_address_from_forward_ton_amount_forward_payload_txid(int query_id, int amount, slice response_address, slice from, int forward_ton_amount, slice forward_payload, slice txid) inline {
    return (query_id, amount, from, response_address, forward_ton_amount, forward_payload, txid);
}

;;
;; Type: TweetfiWallet
;;

builder $TweetfiWallet$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'owner, v'jetton_master) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'jetton_master);
    return build_0;
}

(cell, cell) $TweetfiWallet$_init_child(cell sys', slice $owner, slice $jetton_master) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: TweetfiWallet
    cell mine = __tact_dict_get_code(source, 45083);
    contracts = __tact_dict_set_code(contracts, 45083, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $TweetfiWallet$init$_store(b, ($owner, $jetton_master));
    return (mine, b.end_cell());
}

;;
;; Type: Tweetfi
;;

builder $Tweetfi$_store(builder build_0, (int, int, slice, cell, int, (slice, int, int, slice, int, int)) v) inline {
    var (v'total_supply, v'mintable, v'owner, v'jetton_content, v'max_supply, (v'mint_config'merkle_root, v'mint_config'set_at, v'mint_config'set_interval, v'mint_config'admin, v'mint_config'max_mint_today, v'mint_config'minted_today)) = v;
    build_0 = build_0.store_coins(v'total_supply);
    build_0 = build_0.store_int(v'mintable, 1);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_ref(v'jetton_content);
    build_0 = build_0.store_coins(v'max_supply);
    build_0 = $MintConfig$_store(build_0, (v'mint_config'merkle_root, v'mint_config'set_at, v'mint_config'set_interval, v'mint_config'admin, v'mint_config'max_mint_today, v'mint_config'minted_today));
    return build_0;
}

(slice, ((int, int, slice, cell, int, (slice, int, int, slice, int, int)))) $Tweetfi$_load(slice sc_0) inline {
    var v'total_supply = sc_0~load_coins();
    var v'mintable = sc_0~load_int(1);
    var v'owner = sc_0~__tact_load_address();
    var v'jetton_content = sc_0~load_ref();
    var v'max_supply = sc_0~load_coins();
    var v'mint_config = sc_0~$MintConfig$_load();
    return (sc_0, (v'total_supply, v'mintable, v'owner, v'jetton_content, v'max_supply, v'mint_config));
}

(slice, ((slice, cell, int, (slice, int, int, slice, int, int)))) $Tweetfi$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'jetton_content = sc_0~load_ref();
    var v'max_supply = sc_0~load_int(257);
    var v'mint_config = sc_0~$MintConfig$_load();
    return (sc_0, (v'owner, v'jetton_content, v'max_supply, v'mint_config));
}

(int, int, slice, cell, int, (slice, int, int, slice, int, int)) $Tweetfi$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Tweetfi$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, cell jetton_content, int max_supply, (slice, int, int, slice, int, int) mint_config) = $sc~$Tweetfi$init$_load();
        $sc.end_parse();
        return $Tweetfi$_contract_init(owner, jetton_content, max_supply, mint_config);
    }
}

() $Tweetfi$_contract_store((int, int, slice, cell, int, (slice, int, int, slice, int, int)) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Tweetfi$_store(b, v);
    set_data(b.end_cell());
}