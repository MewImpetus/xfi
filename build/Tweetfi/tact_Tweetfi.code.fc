#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Tweetfi.headers.fc";
#include "tact_Tweetfi.stdlib.fc";
#include "tact_Tweetfi.storage.fc";

;;
;; Contract Tweetfi functions
;;

(int, int, slice, cell, int, (slice, int, int, slice, int, int)) $Tweetfi$_contract_init(slice $owner, cell $jetton_content, int $max_supply, (slice, int, int, slice, int, int) $mint_config) impure inline_ref {
    var (($mint_config'merkle_root, $mint_config'set_at, $mint_config'set_interval, $mint_config'admin, $mint_config'max_mint_today, $mint_config'minted_today)) = $mint_config;
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = (0, true, null(), null(), null(), null());
    $self'owner = $owner;
    $self'jetton_content = $jetton_content;
    $self'max_supply = $max_supply;
    ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today) = ($mint_config'merkle_root, $mint_config'set_at, $mint_config'set_interval, $mint_config'admin, $mint_config'max_mint_today, $mint_config'minted_today);
    return ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today));
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), slice) $Tweetfi$_fun__sha128((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, slice $s) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = $self;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), __tact_int_to_string((string_hash($s) >> 128)));
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), int) $Tweetfi$_fun_verify_proof((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, slice $target_hash, cell $proof, int $proof_length) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = $self;
    slice $current_hash = $target_hash;
    int $frist_cell = true;
    slice $parser = begin_parse($proof);
    repeat ($proof_length) {
        if ((~ $frist_cell)) {
            if ((~ slice_refs_empty?($parser))) {
                $parser = begin_parse($parser~load_ref());
            }
        }
        int $_hash = $parser~load_uint(128);
        int $_position = $parser~load_uint(1);
        tuple $sb = __tact_string_builder_start_string();
        if (($_position == 0)) {
            $sb~__tact_string_builder_append(__tact_int_to_string($_hash));
            $sb~__tact_string_builder_append($current_hash);
        } else {
            $sb~__tact_string_builder_append($current_hash);
            $sb~__tact_string_builder_append(__tact_int_to_string($_hash));
        }
        $current_hash = ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun__sha128(__tact_string_builder_end_slice($sb));
        $frist_cell = false;
    }
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), __tact_slice_eq($self'mint_config'merkle_root, $current_hash));
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), int) $Tweetfi$_fun_testmint((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, (slice, int, slice, slice, int, cell) $msg) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = $self;
    var (($msg'receiver, $msg'amount, $msg'receiver_str, $msg'txid, $msg'proof_length, $msg'proof)) = $msg;
    tuple $sb = __tact_string_builder_start_string();
    $sb~__tact_string_builder_append($msg'txid);
    $sb~__tact_string_builder_append($msg'receiver_str);
    $sb~__tact_string_builder_append(__tact_int_to_string($msg'amount));
    slice $current_hash = ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun__sha128(__tact_string_builder_end_slice($sb));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun_verify_proof($current_hash, $msg'proof, $msg'proof_length));
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), int) $Tweetfi$_fun_max_supply((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = $self;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), $self'max_supply);
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), ()) $Tweetfi$_fun__merkel_mint_validate((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, (slice, int, slice, slice, int, cell) $msg) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = $self;
    var (($msg'receiver, $msg'amount, $msg'receiver_str, $msg'txid, $msg'proof_length, $msg'proof)) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    tuple $sb = __tact_string_builder_start_string();
    $sb~__tact_string_builder_append($msg'txid);
    $sb~__tact_string_builder_append($msg'receiver_str);
    $sb~__tact_string_builder_append(__tact_int_to_string($msg'amount));
    slice $tx_str = __tact_string_builder_end_slice($sb);
    throw_unless(32067, (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun_verify_proof(($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun__sha128($tx_str), $msg'proof, $msg'proof_length) == true));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), ());
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), (cell, cell)) $Tweetfi$_fun_calculate_jetton_wallet_init((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, slice $owner_address) impure inline {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = $self;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), $TweetfiWallet$_init_child(__tact_context_sys, $owner_address, my_address()));
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), ()) $Tweetfi$_fun__mint((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, (int, slice, int, slice) $ctx, (slice, slice, int, cell, int, slice, slice) $msg) impure inline {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = $self;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    var (($msg'origin, $msg'receiver, $msg'amount, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload, $msg'txid)) = $msg;
    var ($initCode'code, $initCode'data) = ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun_calculate_jetton_wallet_init($msg'receiver);
    $self'total_supply = ($self'total_supply + $msg'amount);
    if (null?($msg'txid)) {
        $global_send($SendParameters$_constructor_to_value_bounce_mode_body_code_data($global_contractAddress(($initCode'code, $initCode'data)), 0, true, 64, $JettonInternalTransfer$_store_cell($JettonInternalTransfer$_constructor_query_id_amount_response_address_from_forward_ton_amount_forward_payload(0, $msg'amount, $msg'origin, my_address(), $msg'forward_ton_amount, $msg'forward_payload)), $initCode'code, $initCode'data));
    } else {
        $global_send($SendParameters$_constructor_to_value_bounce_mode_body_code_data($global_contractAddress(($initCode'code, $initCode'data)), 0, true, 64, $ClaimTransfer$_store_cell($ClaimTransfer$_constructor_query_id_amount_response_address_from_forward_ton_amount_forward_payload_txid(0, $msg'amount, $msg'origin, my_address(), $msg'forward_ton_amount, $msg'forward_payload, __tact_not_null($msg'txid))), $initCode'code, $initCode'data));
    }
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), ());
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), ()) $Tweetfi$_fun__mint_validate((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, (int, slice, int, slice) $ctx, (slice, slice, int, cell, int, slice, slice) $msg) impure inline {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = $self;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    var (($msg'origin, $msg'receiver, $msg'amount, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload, $msg'txid)) = $msg;
    throw_unless(43365, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    throw_unless(30061, $self'mintable);
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), ());
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), ()) $Tweetfi$_fun__burn_notification_validate((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, (int, slice, int, slice) $ctx, (int, int, slice, slice) $msg) impure inline {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = $self;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    var (($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination)) = $msg;
    var ($initCode'code, $initCode'data) = ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun_calculate_jetton_wallet_init($msg'sender);
    throw_unless(9739, ( __tact_slice_eq_bits($global_contractAddress(($initCode'code, $initCode'data)), $ctx'sender) ));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), ());
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), ()) $Tweetfi$_fun__burn_notification((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, (int, slice, int, slice) $ctx, (int, int, slice, slice) $msg) impure inline {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = $self;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    var (($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination)) = $msg;
    $self'total_supply = ($self'total_supply - $msg'amount);
    if (( ~ __tact_slice_eq_bits(__tact_create_address(0, 0), $msg'response_destination) )) {
        $global_send($SendParameters$_constructor_to_value_bounce_mode($msg'response_destination, 0, false, (64 + 2)));
    }
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), ());
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), (int, int, slice, cell, cell)) $Tweetfi$_fun_get_jetton_data((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = $self;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), $JettonData$_constructor_total_supply_mintable_admin_address_jetton_content_jetton_wallet_code($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $StateInit$_get_code(($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun_calculate_jetton_wallet_init(my_address()))));
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), slice) $Tweetfi$_fun_get_wallet_address((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, slice $owner_address) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))) = $self;
    var ($initCode'code, $initCode'data) = ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun_calculate_jetton_wallet_init($owner_address);
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), $global_contractAddress(($initCode'code, $initCode'data)));
}

;;
;; Receivers of a Contract Tweetfi
;;

(((int, int, slice, cell, int, (slice, int, int, slice, int, int))), ()) $Tweetfi$_internal_binary_Mint((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, (slice, int, slice, slice, int, cell) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)) = $self;
    var ($msg'receiver, $msg'amount, $msg'receiver_str, $msg'txid, $msg'proof_length, $msg'proof) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    var ($_msg'origin, $_msg'receiver, $_msg'amount, $_msg'custom_payload, $_msg'forward_ton_amount, $_msg'forward_payload, $_msg'txid) = $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload_txid($ctx'sender, $ctx'sender, $msg'amount, end_cell(store_uint(begin_cell(), string_hash($msg'txid), 256)), 0, $global_emptySlice(), $msg'txid);
    throw_unless(8610, (($self'total_supply + $msg'amount) <= $self'max_supply));
    throw_unless(62211, (($self'mint_config'minted_today + $msg'amount) <= $self'mint_config'max_mint_today));
    throw_unless(30061, $self'mintable);
    ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun__merkel_mint_validate($Mint$_tensor_cast(($msg'receiver, $msg'amount, $msg'receiver_str, $msg'txid, $msg'proof_length, $msg'proof)));
    ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun__mint(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), ($_msg'origin, $_msg'receiver, $_msg'amount, $_msg'custom_payload, $_msg'forward_ton_amount, $_msg'forward_payload, $_msg'txid));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), ());
}

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), ()) $Tweetfi$_internal_text_e0fcbe3422dd4e5d29490ee50319be4ee4095922f0443f72ca03692576b81596((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    var ($msg'origin, $msg'receiver, $msg'amount, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload, $msg'txid) = $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload_txid($ctx'sender, $ctx'sender, 1000000000, $global_emptyCell(), 0, $global_emptySlice(), null());
    ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun__mint_validate(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), ($msg'origin, $msg'receiver, $msg'amount, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload, $msg'txid));
    ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun__mint(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), ($msg'origin, $msg'receiver, $msg'amount, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload, $msg'txid));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), ());
}

(((int, int, slice, cell, int, (slice, int, int, slice, int, int))), ()) $Tweetfi$_internal_binary_MerkleRoot((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, (slice) $merkle_root) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)) = $self;
    var ($merkle_root'value) = $merkle_root;
    throw_unless(57166, ( __tact_slice_eq_bits($self'mint_config'admin, __tact_context_get_sender()) ));
    throw_unless(54789, ((now() - $self'mint_config'set_at) > $self'mint_config'set_interval));
    $self'mint_config'merkle_root = $merkle_root'value;
    $self'mint_config'set_at = now();
    $self'mint_config'minted_today = 0;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), ());
}

(((int, int, slice, cell, int, (slice, int, int, slice, int, int))), ()) $Tweetfi$_internal_binary_MerkleAdmin((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, (slice) $merkle_admin) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)) = $self;
    var ($merkle_admin'admin) = $merkle_admin;
    throw_unless(57166, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'mint_config'admin = $merkle_admin'admin;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), ());
}

(((int, int, slice, cell, int, (slice, int, int, slice, int, int))), ()) $Tweetfi$_internal_binary_JettonBurnNotification((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)) = $self;
    var ($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun__burn_notification_validate(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), ($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination));
    ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun__burn_notification(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), ($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), ());
}

(((int, int, slice, cell, int, (slice, int, int, slice, int, int))), ()) $Tweetfi$_internal_binary_Deploy((int, int, slice, cell, int, (slice, int, int, slice, int, int)) $self, (int) $deploy) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today))~$Tweetfi$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'max_supply, ($self'mint_config'merkle_root, $self'mint_config'set_at, $self'mint_config'set_interval, $self'mint_config'admin, $self'mint_config'max_mint_today, $self'mint_config'minted_today)), ());
}

;;
;; Get methods of a Contract Tweetfi
;;

_ %testmint(tuple $$msg) method_id(72120) {
    (slice, int, slice, slice, int, cell) $msg = $Mint$_from_tuple($$msg);
    var self = $Tweetfi$_contract_load();
    var res = self~$Tweetfi$_fun_testmint($msg);
    return res;
}

_ %max_supply() method_id(102571) {
    var self = $Tweetfi$_contract_load();
    var res = self~$Tweetfi$_fun_max_supply();
    return res;
}

_ %get_jetton_data() method_id(106029) {
    var self = $Tweetfi$_contract_load();
    var res = self~$Tweetfi$_fun_get_jetton_data();
    return $JettonData$_to_external(res);
}

_ %get_wallet_address(slice $$owner_address) method_id(103289) {
    slice $owner_address = __tact_verify_address($$owner_address);
    var self = $Tweetfi$_contract_load();
    var res = self~$Tweetfi$_fun_get_wallet_address($owner_address);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmNzckMtyPfrP1Sf7B9gw87sow3j8g1TQvU6NExbFhcvRA";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Tweetfi
;;

((int, int, slice, cell, int, (slice, int, int, slice, int, int)), int) $Tweetfi$_contract_router_internal((int, int, slice, cell, int, (slice, int, int, slice, int, int)) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Mint message
    if (op == 3991647442) {
        var msg = in_msg~$Mint$_load();
        self~$Tweetfi$_internal_binary_Mint(msg);
        return (self, true);
    }
    
    ;; Receive MerkleRoot message
    if (op == 2598927291) {
        var msg = in_msg~$MerkleRoot$_load();
        self~$Tweetfi$_internal_binary_MerkleRoot(msg);
        return (self, true);
    }
    
    ;; Receive MerkleAdmin message
    if (op == 1634568939) {
        var msg = in_msg~$MerkleAdmin$_load();
        self~$Tweetfi$_internal_binary_MerkleAdmin(msg);
        return (self, true);
    }
    
    ;; Receive JettonBurnNotification message
    if (op == 2078119902) {
        var msg = in_msg~$JettonBurnNotification$_load();
        self~$Tweetfi$_internal_binary_JettonBurnNotification(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Tweetfi$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Mint:1" message
        if (text_op == 0xe0fcbe3422dd4e5d29490ee50319be4ee4095922f0443f72ca03692576b81596) {
            self~$Tweetfi$_internal_text_e0fcbe3422dd4e5d29490ee50319be4ee4095922f0443f72ca03692576b81596();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Tweetfi$_contract_load();
    
    ;; Handle operation
    int handled = self~$Tweetfi$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Tweetfi$_contract_store(self);
}
